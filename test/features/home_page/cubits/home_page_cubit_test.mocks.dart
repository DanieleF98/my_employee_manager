// Mocks generated by Mockito 5.4.2 from annotations
// in my_employee_manager/test/features/home_page/cubits/home_page_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:flutter_bloc/flutter_bloc.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:my_employee_manager/core/domain/entities/employee_entity.dart'
    as _i8;
import 'package:my_employee_manager/core/domain/utils/failure/generic_failure_entity.dart'
    as _i7;
import 'package:my_employee_manager/features/home_page/domain/repository/home_page_repository.dart'
    as _i2;
import 'package:my_employee_manager/features/home_page/domain/use_cases/get_all_employees_use_case.dart'
    as _i5;
import 'package:my_employee_manager/features/home_page/presentation/cubit/home_page_search_employee/home_page_search_employee_cubit.dart'
    as _i9;
import 'package:my_employee_manager/features/home_page/presentation/cubit/home_page_search_employee/home_page_search_employee_state.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHomePageRepository_0 extends _i1.SmartFake
    implements _i2.HomePageRepository {
  _FakeHomePageRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHomePageSearchEmployeeState_2 extends _i1.SmartFake
    implements _i4.HomePageSearchEmployeeState {
  _FakeHomePageSearchEmployeeState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetAllEmployeesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllEmployeesUseCase extends _i1.Mock
    implements _i5.GetAllEmployeesUseCase {
  @override
  _i2.HomePageRepository get homePageRepository => (super.noSuchMethod(
        Invocation.getter(#homePageRepository),
        returnValue: _FakeHomePageRepository_0(
          this,
          Invocation.getter(#homePageRepository),
        ),
        returnValueForMissingStub: _FakeHomePageRepository_0(
          this,
          Invocation.getter(#homePageRepository),
        ),
      ) as _i2.HomePageRepository);
  @override
  _i6.Future<
      _i3.Either<_i7.GenericFailureEntity,
          List<_i8.EmployeeEntity>>> apply() => (super.noSuchMethod(
        Invocation.method(
          #apply,
          [],
        ),
        returnValue: _i6.Future<
                _i3.Either<_i7.GenericFailureEntity,
                    List<_i8.EmployeeEntity>>>.value(
            _FakeEither_1<_i7.GenericFailureEntity, List<_i8.EmployeeEntity>>(
          this,
          Invocation.method(
            #apply,
            [],
          ),
        )),
        returnValueForMissingStub: _i6.Future<
                _i3.Either<_i7.GenericFailureEntity,
                    List<_i8.EmployeeEntity>>>.value(
            _FakeEither_1<_i7.GenericFailureEntity, List<_i8.EmployeeEntity>>(
          this,
          Invocation.method(
            #apply,
            [],
          ),
        )),
      ) as _i6.Future<
          _i3.Either<_i7.GenericFailureEntity, List<_i8.EmployeeEntity>>>);
}

/// A class which mocks [HomePageSearchEmployeeCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomePageSearchEmployeeCubit extends _i1.Mock
    implements _i9.HomePageSearchEmployeeCubit {
  @override
  _i4.HomePageSearchEmployeeState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeHomePageSearchEmployeeState_2(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeHomePageSearchEmployeeState_2(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.HomePageSearchEmployeeState);
  @override
  _i6.Stream<_i4.HomePageSearchEmployeeState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i4.HomePageSearchEmployeeState>.empty(),
        returnValueForMissingStub:
            _i6.Stream<_i4.HomePageSearchEmployeeState>.empty(),
      ) as _i6.Stream<_i4.HomePageSearchEmployeeState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void initData({required List<_i8.EmployeeEntity>? employees}) =>
      super.noSuchMethod(
        Invocation.method(
          #initData,
          [],
          {#employees: employees},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void searchEmployee({required String? query}) => super.noSuchMethod(
        Invocation.method(
          #searchEmployee,
          [],
          {#query: query},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i4.HomePageSearchEmployeeState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i10.Change<_i4.HomePageSearchEmployeeState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
